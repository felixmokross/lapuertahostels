name: Check
on:
  pull_request:
  workflow_call:
    secrets:
      CHROMATIC_PROJECT_TOKEN:
        required: true

env:
  NODE_VERSION: 20
  PNPM_VERSION: 9
  STORYBOOK_IMAGEKIT_BASE_URL: https://ik.imagekit.io/lapuertahostels/staging

jobs:
  frontend-lint:
    name: Frontend / Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - uses: ./.github/actions/populate-cms-types
      - run: pnpm lint --max-warnings=0
        working-directory: frontend

  frontend-format:
    name: Frontend / Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - run: pnpm check-format
        working-directory: frontend

  frontend-typecheck:
    name: Frontend / Typecheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - uses: ./.github/actions/populate-cms-types
      - run: pnpm typecheck
        working-directory: frontend

  frontend-unit-tests:
    name: Frontend / Unit Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - uses: ./.github/actions/populate-cms-types
      - run: pnpm test
        working-directory: frontend

  frontend-build-push:
    name: Frontend / Build and Push
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      image: ${{ steps.image-name.outputs.image }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: ./.github/actions/version
        id: version
      - name: Image name
        id: image-name
        run: |
          echo "image=ghcr.io/${{ github.repository }}-frontend:${{ steps.version.outputs.version }}" >> "$GITHUB_OUTPUT"
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend
          tags: ${{ steps.image-name.outputs.image }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  frontend-chromatic:
    name: Frontend / Chromatic
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - name: Publish to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          exitOnceUploaded: true
          onlyChanged: true
          workingDir: frontend
        env:
          STORYBOOK_IMAGEKIT_BASE_URL: ${{ env.STORYBOOK_IMAGEKIT_BASE_URL }}
          STORYBOOK_USE_IMAGE_CACHE_BUSTER: true

  cms-format:
    name: CMS / Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/setup
        with:
          working-directory: cms
      - run: pnpm check-format
        working-directory: cms

  cms-build-push:
    name: CMS / Build and Push
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      image: ${{ steps.image-name.outputs.image }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - uses: ./.github/actions/version
        id: version
      - name: Image name
        id: image-name
        run: |
          echo "image=ghcr.io/${{ github.repository }}-cms:${{ steps.version.outputs.version }}" >> "$GITHUB_OUTPUT"
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.cms
          tags: ${{ steps.image-name.outputs.image }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  e2e-tests:
    name: End-to-End Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [frontend-build-push, cms-build-push]
    steps:
      - uses: actions/checkout@v4
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"
          cache-dependency-path: pnpm-lock.yaml
      - name: Install e2e dependencies
        run: pnpm --filter e2e install
      - name: Start services
        run: docker compose up -d && sleep 3
        env:
          FRONTEND_IMAGE: ${{ needs.frontend-build-push.outputs.image }}
          SESSION_SECRET: $(openssl rand -hex 32)
          CMS_IMAGE: ${{ needs.cms-build-push.outputs.image }}
          PAYLOAD_SECRET: $(openssl rand -hex 12)
          PREVIEW_MEDIA_S3_ACCESS_KEY_ID: ${{ secrets.PREVIEW_MEDIA_S3_ACCESS_KEY_ID }}
          PREVIEW_MEDIA_S3_SECRET_ACCESS_KEY: ${{ secrets.PREVIEW_MEDIA_S3_SECRET_ACCESS_KEY }}
          PREVIEW_OPENAI_API_KEY: ${{ secrets.PREVIEW_OPENAI_API_KEY }}
        working-directory: e2e
      - name: Get Playwright version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(pnpm list @playwright/test --depth=0 | grep '@playwright/test' | awk '{print $2}')
          echo "playwright_version=${PLAYWRIGHT_VERSION}" >> $GITHUB_OUTPUT
        working-directory: e2e
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.playwright_version }}
      - run: pnpm playwright install --with-deps chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: e2e
      - run: pnpm playwright test
        working-directory: e2e
        env:
          FRONTEND_BASE_URL: http://localhost:3000
          CMS_BASE_URL: http://localhost:3001
          CMS_API_KEY: apikey
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30

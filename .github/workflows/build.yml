name: Build
on:
  pull_request:
  push:
    branches:
      - main
    tags:
      - v*
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        required: true
        default: "staging"
        options:
          - staging
          - production

env:
  NODE_VERSION: 20
  PNPM_VERSION: 9
  FLYCTL_VERSION: 0.3.55
  FRONTEND_INTERNAL_PORT: 3000
  CMS_INTERNAL_PORT: 3001
  STORYBOOK_IMAGEKIT_BASE_URL: https://ik.imagekit.io/lapuertahostels/staging
  PREVIEW_IMAGEKIT_BASE_URL: https://ik.imagekit.io/lapuertahostels/preview
  PREVIEW_MEDIA_S3_BUCKET: lapuertahostels-media-preview
  MEDIA_S3_REGION: eu-west-3

jobs:
  frontend-lint:
    name: "Frontend: Lint"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up frontend
        uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - name: Populate CMS types
        uses: ./.github/actions/populate-cms-types
      - name: Run lint in frontend
        run: pnpm lint --max-warnings=0
        working-directory: frontend

  frontend-check-format:
    name: "Frontend: Check Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up frontend
        uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - name: Check format in frontend
        run: pnpm check-format
        working-directory: frontend

  frontend-typecheck:
    name: "Frontend: Typecheck"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up frontend
        uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - name: Populate CMS types
        uses: ./.github/actions/populate-cms-types
      - name: Run typecheck in frontend 
        run: pnpm typecheck
        working-directory: frontend

  frontend-unit-tests:
    name: "Frontend: Unit Tests"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up frontend
        uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - name: Populate CMS types
        uses: ./.github/actions/populate-cms-types
      - name: Run unit tests in frontend
        run: pnpm test
        working-directory: frontend

  frontend-build-push:
    name: "Frontend: Build and Push"
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      image: ${{ steps.image-name.outputs.image }}
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate version
        uses: ./.github/actions/version
        id: version
      - name: Get frontend image name
        id: image-name
        run: |
          echo "image=ghcr.io/${{ github.repository }}-frontend:v${{ steps.version.outputs.version }}" >> "$GITHUB_OUTPUT"
      - name: Build and push frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.frontend
          tags: ${{ steps.image-name.outputs.image }}
          labels: org.opencontainers.image.version=v${{ steps.version.outputs.version }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  frontend-publish-chromatic:
    name: "Frontend: Publish to Chromatic"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up frontend
        uses: ./.github/actions/setup
        with:
          working-directory: frontend
      - name: Publish frontend to Chromatic
        uses: chromaui/action@v1
        with:
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          exitOnceUploaded: true
          onlyChanged: true
          workingDir: frontend
        env:
          STORYBOOK_IMAGEKIT_BASE_URL: ${{ env.STORYBOOK_IMAGEKIT_BASE_URL }}
          STORYBOOK_USE_IMAGE_CACHE_BUSTER: true
          STORYBOOK_GOOGLE_MAPS_API_KEY: ${{ secrets.PREVIEW_GOOGLE_MAPS_API_KEY }}
  
  frontend-deploy-preview:
    name: "Frontend: Deploy Preview"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLY_ORG: ${{ vars.FLY_ORG }}
    needs: frontend-build-push
    environment:
      name: preview-frontend
      url: ${{ steps.app-name.outputs.app-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ env.FLYCTL_VERSION }}
      - name: Get frontend preview app name
        uses: ./.github/actions/app-name
        id: app-name
        with:
          component: frontend
      - name: Get CMS preview app name
        uses: ./.github/actions/app-name
        id: cms-app-name
        with:
          component: cms
      - name: Delete frontend preview app if exists
        run: |
          flyctl apps destroy --yes ${{ steps.app-name.outputs.app-name }} || true
      - name: Create frontend preview app
        run: |
          echo Creating app ${{ steps.app-name.outputs.app-name }}:
          flyctl apps create --name ${{ steps.app-name.outputs.app-name }} --org $FLY_ORG

          echo Setting secrets:
          flyctl secrets set PAYLOAD_CMS_API_KEY=$PREVIEW_PAYLOAD_CMS_API_KEY \
            SESSION_SECRET=$(openssl rand -hex 32) \
            GOOGLE_MAPS_API_KEY=$PREVIEW_GOOGLE_MAPS_API_KEY \
            --app ${{ steps.app-name.outputs.app-name }} --stage
        env:
          PREVIEW_PAYLOAD_CMS_API_KEY: ${{ secrets.PREVIEW_PAYLOAD_CMS_API_KEY }}
          PREVIEW_GOOGLE_MAPS_API_KEY: ${{ secrets.PREVIEW_GOOGLE_MAPS_API_KEY }}
        working-directory: frontend
      - name: Deploy frontend preview app
        run: |
          flyctl deploy \
            --app ${{ steps.app-name.outputs.app-name }} \
            --config fly.frontend.preview.toml \
            --ha=false \
            --image ${{ needs.frontend-build-push.outputs.image }} \
            --env IMAGEKIT_BASE_URL=${{ env.PREVIEW_IMAGEKIT_BASE_URL }} \
            --env PAYLOAD_CMS_BASE_URL=${{ steps.cms-app-name.outputs.app-url }} \
            --env CANONICAL_HOSTNAME=${{ steps.app-name.outputs.app-domain }} \

  frontend-deploy:
    name: "Frontend: Deploy"
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - frontend-build-push
      - frontend-publish-chromatic
      - frontend-check-format
      - frontend-lint
      - frontend-typecheck
      - frontend-unit-tests
      - e2e-tests
      - define-env
    environment:
      name: ${{ needs.define-env.outputs.environment }}-frontend
      url: https://${{ needs.define-env.outputs.canonical_hostname_frontend }}/
    steps:
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ env.FLYCTL_VERSION }}
      - name: Deploy frontend
        run: |
          flyctl deploy \
            --app ${{ needs.define-env.outputs.fly_app_frontend }} \
            --config fly.frontend.toml \
            --image ${{ needs.frontend-build-push.outputs.image }} \
            --env ANALYTICS_DOMAIN=${{ needs.define-env.outputs.analytics_domain_frontend }} \
            --env CANONICAL_HOSTNAME=${{ needs.define-env.outputs.canonical_hostname_frontend }} \
            --env IMAGEKIT_BASE_URL=${{ needs.define-env.outputs.imagekit_base_url }} \
            --env PAYLOAD_CMS_BASE_URL=https://${{ needs.define-env.outputs.domain_cms }} \
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}

  cms-check-format:
    name: "CMS: Check Format"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up CMS
        uses: ./.github/actions/setup
        with:
          working-directory: cms
      - name: Check format in CMS
        run: pnpm check-format
        working-directory: cms

  cms-build-push:
    name: "CMS: Build and Push"
    runs-on: ubuntu-latest
    permissions:
      packages: write
    outputs:
      image: ${{ steps.image-name.outputs.image }}
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Generate version
        uses: ./.github/actions/version
        id: version
      - name: Get CMS image name
        id: image-name
        run: |
          echo "image=ghcr.io/${{ github.repository }}-cms:v${{ steps.version.outputs.version }}" >> "$GITHUB_OUTPUT"
      - name: Build and push CMS Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile.cms
          tags: ${{ steps.image-name.outputs.image }}
          labels: org.opencontainers.image.version=v${{ steps.version.outputs.version }}
          push: true
          cache-from: type=gha
          cache-to: type=gha,mode=max

  cms-deploy-preview:
    name: "CMS: Deploy Preview"
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    env:
      FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      FLY_ORG: ${{ vars.FLY_ORG }}
    needs: cms-build-push
    environment:
      name: preview-cms
      url: ${{ steps.app-name.outputs.app-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ env.FLYCTL_VERSION }}
      - name: Get CMS preview app name
        uses: ./.github/actions/app-name
        id: app-name
        with:
          component: cms
      - name: Get frontend preview app name
        uses: ./.github/actions/app-name
        id: frontend-app-name
        with:
          component: frontend
      - name: Delete CMS preview app if exists
        run: |
          flyctl apps destroy --yes ${{ steps.app-name.outputs.app-name }} || true
      - name: Create CMS preview app
        run: |
          echo Creating app ${{ steps.app-name.outputs.app-name }}:
          flyctl apps create --name ${{ steps.app-name.outputs.app-name }} --org $FLY_ORG

          echo Setting secrets:
          flyctl secrets set DATABASE_URI=$PREVIEW_DATABASE_URI \
            PAYLOAD_SECRET=$PREVIEW_PAYLOAD_SECRET \
            MEDIA_S3_ACCESS_KEY_ID=$PREVIEW_MEDIA_S3_ACCESS_KEY_ID \
            MEDIA_S3_SECRET_ACCESS_KEY=$PREVIEW_MEDIA_S3_SECRET_ACCESS_KEY \
            DEEPL_API_AUTH_KEY=$PREVIEW_DEEPL_API_AUTH_KEY \
            OPENAI_API_KEY="$PREVIEW_OPENAI_API_KEY" \
            --app ${{ steps.app-name.outputs.app-name }} --stage
        env:
          PREVIEW_DATABASE_URI: ${{ secrets.PREVIEW_DATABASE_URI }}
          PREVIEW_PAYLOAD_SECRET: ${{ secrets.PREVIEW_PAYLOAD_SECRET }}
          PREVIEW_MEDIA_S3_ACCESS_KEY_ID: ${{ secrets.PREVIEW_MEDIA_S3_ACCESS_KEY_ID }}
          PREVIEW_MEDIA_S3_SECRET_ACCESS_KEY: ${{ secrets.PREVIEW_MEDIA_S3_SECRET_ACCESS_KEY }}
          PREVIEW_DEEPL_API_AUTH_KEY: ${{ secrets.PREVIEW_DEEPL_API_AUTH_KEY }}
          PREVIEW_OPENAI_API_KEY: ${{ secrets.PREVIEW_OPENAI_API_KEY }}
        working-directory: cms
      - name: Deploy CMS preview app
        run: |
          flyctl deploy \
            --app ${{ steps.app-name.outputs.app-name }} \
            --config fly.cms.toml \
            --ha=false \
            --image ${{ needs.cms-build-push.outputs.image }} \
            --env CACHE_REFRESH_TARGET_TYPE=fly \
            --env CACHE_REFRESH_TARGET_ARG=${{ steps.frontend-app-name.outputs.app-name }},${{ env.FRONTEND_INTERNAL_PORT }} \
            --env MEDIA_S3_BUCKET=${{ env.PREVIEW_MEDIA_S3_BUCKET }} \
            --env MEDIA_S3_REGION=${{ env.MEDIA_S3_REGION }} \
            --env IMAGEKIT_BASE_URL=${{ env.PREVIEW_IMAGEKIT_BASE_URL }} \
            --env LIVE_PREVIEW_URL=${{ steps.frontend-app-name.outputs.app-url }} \
            --env SERVER_URL=${{ steps.app-name.outputs.app-url }} \

  cms-deploy:
    name: "CMS: Deploy"
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    needs:
      - cms-build-push
      - cms-check-format
      - e2e-tests
      - define-env
    environment:
      name: ${{ needs.define-env.outputs.environment }}-cms
      url: https://${{ needs.define-env.outputs.domain_cms }}/
    steps:
      - name: Set up flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        with:
          version: ${{ env.FLYCTL_VERSION }}
      - name: Deploy CMS
        run: |
          flyctl deploy \
            --app ${{ needs.define-env.outputs.fly_app_cms }} \
            --config fly.cms.toml \
            --image ${{ needs.cms-build-push.outputs.image }} \
            --env CACHE_REFRESH_TARGET_TYPE=fly \
            --env CACHE_REFRESH_TARGET_ARG=${{ needs.define-env.outputs.fly_app_frontend }},${{ env.FRONTEND_INTERNAL_PORT }} \
            --env MEDIA_S3_BUCKET=${{ needs.define-env.outputs.s3_bucket }} \
            --env MEDIA_S3_REGION=${{ env.MEDIA_S3_REGION }} \
            --env IMAGEKIT_BASE_URL=${{ needs.define-env.outputs.imagekit_base_url }} \
            --env LIVE_PREVIEW_URL=https://${{ needs.define-env.outputs.canonical_hostname_frontend }} \
            --env SERVER_URL=https://${{ needs.define-env.outputs.domain_cms }} \
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
      - name: Wait 30s for app to become ready
        run: sleep 30
      - name: Prime frontend cache
        # We rely here on the frontend deployment being significantly faster
        # – We can't make cache priming a separate job because we need an environment secret
        # - We should anyway add some logic to synchronize the deployments (or simply merge them)
        run: |
          curl "https://${{ needs.define-env.outputs.domain_cms }}/api/prime-frontend-cache" \
            -f -s -S \
            -X POST \
            -H "Authorization: users API-Key ${{ secrets.CICD_USER_API_KEY }}"

  e2e-tests:
    name: End-to-End Tests
    timeout-minutes: 60
    runs-on: ubuntu-latest
    needs: [frontend-build-push, cms-build-push]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up e2e
        uses: ./.github/actions/setup
        with:
          working-directory: e2e
      - name: Start services
        run: docker compose up -d && sleep 3
        env:
          FRONTEND_IMAGE: ${{ needs.frontend-build-push.outputs.image }}
          SESSION_SECRET: $(openssl rand -hex 32)
          CMS_IMAGE: ${{ needs.cms-build-push.outputs.image }}
          PAYLOAD_SECRET: $(openssl rand -hex 12)
          PREVIEW_MEDIA_S3_ACCESS_KEY_ID: ${{ secrets.PREVIEW_MEDIA_S3_ACCESS_KEY_ID }}
          PREVIEW_MEDIA_S3_SECRET_ACCESS_KEY: ${{ secrets.PREVIEW_MEDIA_S3_SECRET_ACCESS_KEY }}
          PREVIEW_OPENAI_API_KEY: ${{ secrets.PREVIEW_OPENAI_API_KEY }}
        working-directory: e2e
      - name: Get Playwright version
        id: playwright-version
        run: |
          PLAYWRIGHT_VERSION=$(pnpm list @playwright/test --depth=0 | grep '@playwright/test' | awk '{print $2}')
          echo "playwright_version=${PLAYWRIGHT_VERSION}" >> $GITHUB_OUTPUT
        working-directory: e2e
      - name: Cache Playwright browsers
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ steps.playwright-version.outputs.playwright_version }}
      - name: Install Playwright dependencies
        run: pnpm playwright install --with-deps chromium
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        working-directory: e2e
      - name: Run e2e tests
        run: pnpm playwright test
        working-directory: e2e
        env:
          FRONTEND_BASE_URL: http://localhost:${{ env.FRONTEND_INTERNAL_PORT }}
          CMS_BASE_URL: http://localhost:${{ env.CMS_INTERNAL_PORT }}
          CMS_API_KEY: apikey
      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30

  clean-preview:
    name: Clean Preview Apps
    uses: ./.github/workflows/clean-preview.yml
    secrets: inherit
    needs: [frontend-deploy-preview, cms-deploy-preview]
        
  define-env:
    name: Define Environment
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      environment: ${{ steps.define-env.outputs.environment }}
      fly_app_frontend: ${{ steps.define-env.outputs.fly_app_frontend }}
      fly_app_cms: ${{ steps.define-env.outputs.fly_app_cms }}
      analytics_domain_frontend: ${{ steps.define-env.outputs.analytics_domain_frontend }}
      canonical_hostname_frontend: ${{ steps.define-env.outputs.canonical_hostname_frontend }}
      domain_cms: ${{ steps.define-env.outputs.domain_cms }}
      s3_bucket: ${{ steps.define-env.outputs.s3_bucket }}
      imagekit_base_url: ${{ steps.define-env.outputs.imagekit_base_url }}
    steps:
      - name: Define environment
        run: |
          environment=${{ inputs.environment || 'staging' }}
          echo "environment=$environment" >> "$GITHUB_OUTPUT"

          case $environment in
            production)
              echo "fly_app_frontend=lapuertahostels-2" >> "$GITHUB_OUTPUT"
              echo "fly_app_cms=lapuertahostels-cms" >> "$GITHUB_OUTPUT"
              echo "analytics_domain_frontend=lapuertahostels.co" >> "$GITHUB_OUTPUT"
              echo "canonical_hostname_frontend=www.lapuertahostels.co" >> "$GITHUB_OUTPUT"
              echo "domain_cms=admin.lapuertahostels.co" >> "$GITHUB_OUTPUT"
              echo "s3_bucket=lapuertahostels-media" >> "$GITHUB_OUTPUT"
              echo "imagekit_base_url=https://ik.imagekit.io/lapuertahostels" >> "$GITHUB_OUTPUT"
              ;;
            staging)
              echo "fly_app_frontend=lapuertahostels-staging" >> "$GITHUB_OUTPUT"
              echo "fly_app_cms=lapuertahostels-cms-staging" >> "$GITHUB_OUTPUT"
              echo "analytics_domain_frontend=staging.lapuertahostels.co" >> "$GITHUB_OUTPUT"
              echo "canonical_hostname_frontend=www.staging.lapuertahostels.co" >> "$GITHUB_OUTPUT"
              echo "domain_cms=admin.staging.lapuertahostels.co" >> "$GITHUB_OUTPUT"
              echo "s3_bucket=lapuertahostels-media-staging" >> "$GITHUB_OUTPUT"
              echo "imagekit_base_url=https://ik.imagekit.io/lapuertahostels/staging" >> "$GITHUB_OUTPUT"
              ;;
          esac
        id: define-env

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs:
      - frontend-build-push
      - frontend-publish-chromatic
      - frontend-check-format
      - frontend-lint
      - frontend-typecheck
      - frontend-unit-tests
      - cms-build-push
      - cms-check-format
      - e2e-tests
    steps:
      - name: Checkout with full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Generate version
        uses: ./.github/actions/version
      - name: Create release
        uses: softprops/action-gh-release@v1
    permissions:
      contents: write
  
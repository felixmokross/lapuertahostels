/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    brands: Brand;
    pages: Page;
    media: Media;
    mediaCategory: MediaCategory;
    banners: Banner;
    texts: Text;
    links: Link;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  globals: {
    common: Common;
    maintenance: Maintenance;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'cicd' | 'frontend' | 'editor' | 'admin';
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands".
 */
export interface Brand {
  id: string;
  name: string;
  homeLink: string | Link;
  logo: string | Media;
  banner?: (string | null) | Banner;
  navLinks?:
    | {
        label: string | Text;
        link: string | Link;
        id?: string | null;
      }[]
    | null;
  footer?: {
    linkGroups?:
      | {
          name: string;
          title: string | Text;
          links?:
            | {
                label: string | Text;
                link: string | Link;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links".
 */
export interface Link {
  id: string;
  type: 'internal' | 'external';
  page?: (string | null) | Page;
  queryString?: string | null;
  fragment?: string | null;
  url?: string | null;
  comment?: string | null;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  url: string;
  brand?: (string | null) | Brand;
  title?: (string | null) | Text;
  hero?:
    | (
        | {
            slides: {
              name: string;
              image: string | Media;
              imageAlignment?: ('center' | 'bottom') | null;
              overlayTitle?: {
                show?: boolean | null;
                text?: (string | null) | Text;
                supportingText?: (string | null) | Text;
                cta?: {
                  show?: boolean | null;
                  label?: (string | null) | Text;
                  link?: (string | null) | Link;
                  variant?: ('primary' | 'secondary') | null;
                };
                position?: ('center' | 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left') | null;
                overlay?: ('subtle' | 'moderate' | 'intense') | null;
              };
              id?: string | null;
            }[];
            autoplayIntervalInSeconds?: number | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroSlides';
          }
        | {
            video: string | Media;
            previewImage?: string | Media | null;
            overlayTitle?: {
              show?: boolean | null;
              text?: (string | null) | Text;
              supportingText?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              position?: ('center' | 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left') | null;
              overlay?: ('subtle' | 'moderate' | 'intense') | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroVideo';
          }
        | {
            heading: string | Text;
            image?: string | Media | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroHeading';
          }
      )[]
    | null;
  layout?:
    | (
        | {
            heading?: (string | null) | Text;
            text: string | Text;
            cta?: {
              show?: boolean | null;
              label?: (string | null) | Text;
              link?: (string | null) | Link;
              variant?: ('primary' | 'secondary') | null;
            };
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'LeadText';
          }
        | {
            heading: string | Text;
            text: string | Text;
            cards: {
              brand: string | Brand;
              image: string | Media;
              description: string | Text;
              id?: string | null;
            }[];
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'AccommodationSelector';
          }
        | {
            image: string | Media;
            overlayTitle: {
              text: string | Text;
              supportingText?: (string | null) | Text;
              position?: ('top-left' | 'top-right') | null;
              overlay?: ('subtle' | 'moderate' | 'intense') | null;
            };
            text: string | Text;
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'ImageWithFloatingText';
          }
        | {
            heading?: (string | null) | Text;
            text: string | Text;
            image?: string | Media | null;
            imagePosition?: ('left' | 'right') | null;
            grayscaleImage?: boolean | null;
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Story';
          }
        | {
            orientation?: ('first-image-left' | 'first-image-right') | null;
            items: {
              image: string | Media;
              heading: string | Text;
              text: string | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Features';
          }
        | {
            id?: string | null;
            blockName?: string | null;
            blockType: 'Separator';
          }
        | {
            image: string | Media;
            overlayTextBox?: {
              show?: boolean | null;
              heading?: (string | null) | Text;
              text?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              position?: ('top-left' | 'top-right' | 'bottom-left' | 'bottom-right') | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'WideImage';
          }
        | {
            rooms: {
              heading: string | Text;
              text?: (string | null) | Text;
              images: {
                image: string | Media;
                caption?: (string | null) | Text;
                id?: string | null;
              }[];
              cta: {
                label: string | Text;
                link: string | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'RoomList';
          }
        | {
            heading?: (string | null) | Text;
            text?: (string | null) | Text;
            numberOfColumns?: number | null;
            items: {
              image?: string | Media | null;
              size?: ('full' | 'medium' | 'small') | null;
              heading?: (string | null) | Text;
              text?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'TextColumnsWithImages';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "texts".
 */
export interface Text {
  id: string;
  type: 'plainText' | 'richText';
  text?: string | null;
  richText?:
    | {
        [k: string]: unknown;
      }[]
    | null;
  comment?: string | null;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  category?: (string | null) | MediaCategory;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCategory".
 */
export interface MediaCategory {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners".
 */
export interface Banner {
  id: string;
  name: string;
  message: string | Text;
  cta?: {
    show?: boolean | null;
    label?: (string | null) | Text;
    link?: (string | null) | Link;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "common".
 */
export interface Common {
  id: string;
  meta?: {
    description?: (string | null) | Text;
  };
  footer: {
    address: string | Text;
    copyright: string | Text;
    socialLinks?:
      | {
          platform: 'facebook' | 'instagram' | 'whatsapp';
          link: string | Link;
          id?: string | null;
        }[]
      | null;
    newsletter?: {
      show?: boolean | null;
      title?: (string | null) | Text;
      description?: (string | null) | Text;
      emailPlaceholder?: (string | null) | Text;
      buttonLabel?: (string | null) | Text;
    };
  };
  pageNotFoundScreen: {
    heading: string | Text;
    text: string | Text;
  };
  errorScreen: {
    heading: string | Text;
    text: string | Text;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "maintenance".
 */
export interface Maintenance {
  id: string;
  maintenanceScreen?: {
    show?: boolean | null;
    message?: (string | null) | Text;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}

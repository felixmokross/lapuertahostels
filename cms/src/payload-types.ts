/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    brands: Brand;
    pages: Page;
    media: Media;
    mediaCategory: MediaCategory;
    banners: Banner;
    texts: Text;
    links: Link;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    mediaCategory: {
      media: 'media';
    };
  };
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    brands: BrandsSelect<false> | BrandsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    mediaCategory: MediaCategorySelect<false> | MediaCategorySelect<true>;
    banners: BannersSelect<false> | BannersSelect<true>;
    texts: TextsSelect<false> | TextsSelect<true>;
    links: LinksSelect<false> | LinksSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    common: Common;
    maintenance: Maintenance;
  };
  globalsSelect: {
    common: CommonSelect<false> | CommonSelect<true>;
    maintenance: MaintenanceSelect<false> | MaintenanceSelect<true>;
  };
  locale: 'en' | 'es' | 'de' | 'fr';
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'cicd' | 'frontend' | 'editor' | 'admin';
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands".
 */
export interface Brand {
  id: string;
  name: string;
  homeLink?: (string | null) | Link;
  /**
   * The base title is appended to the titles of the brand’s pages. If the page does not have a title, the base title will be used as the title. Include important keywords in the title for SEO.
   */
  baseTitle?: (string | null) | Text;
  logo: string | Media;
  /**
   * A banner is useful to announce promotions or important news and can have a call to action. It will be shown on all pages of the brand.
   */
  banner?: (string | null) | Banner;
  navLinks?:
    | {
        label: string | Text;
        link: string | Link;
        id?: string | null;
      }[]
    | null;
  bookCta?: {
    show?: boolean | null;
    label?: (string | null) | Text;
    link?: (string | null) | Link;
  };
  footer?: {
    linkGroups?:
      | {
          title: string | Text;
          links?:
            | {
                label: string | Text;
                link: string | Link;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links".
 */
export interface Link {
  id: string;
  page?: (string | null) | Page;
  /**
   * If a query string is provided, it will be appended to the URL with a '?' character.
   */
  queryString?: string | null;
  /**
   * If a fragment is provided, it will be appended to the URL with a '#' character. Use this to link to a section of a page, defined by an 'Element ID'.
   */
  fragment?: string | null;
  url?: string | null;
  /**
   * Use 'internal' to link to a page within the site. 'External' allows you to enter a URL.
   */
  type: 'internal' | 'external';
  /**
   * Add a comment to make this link easier to find.
   */
  comment?: string | null;
  /**
   * This field is generated automatically and is only used internally in the CMS to identify the link.
   */
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  /**
   * A hero section is the first thing a user sees when they visit a page. Only one hero block can be added to a page. To replace the current hero block by a different block type, remove it and add a new one.
   */
  hero?:
    | (
        | {
            /**
             * This heading is only used for SEO purposes and is not shown on the page. Since the slide overlay titles semantically don't define the page's main heading, you can use this field to define the main heading of the page.
             */
            seoPageHeading: string | Text;
            /**
             * You can use this either for a single hero image or a slideshow with multiple images. Each slide can have an overlay title and a call-to-action button. You can add up to six slides.
             */
            slides: {
              image: string | Media;
              /**
               * Depending on the user’s device or window size, the slide often has a different aspect ratio than the image. This setting defines how the image is aligned within the slide area.
               */
              imageAlignment?: ('center' | 'bottom') | null;
              overlayTitle?: {
                show?: boolean | null;
                text?: (string | null) | Text;
                supportingText?: (string | null) | Text;
                cta?: {
                  show?: boolean | null;
                  label?: (string | null) | Text;
                  link?: (string | null) | Link;
                  variant?: ('primary' | 'secondary') | null;
                };
                position?: ('center' | 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left') | null;
                /**
                 * The overlay is a semi-transparent black layer that is placed on top of the image to make the text more readable. Choose the intensity that is the best trade-off between readability of the text and brightness of the image.
                 */
                overlay?: ('subtle' | 'moderate' | 'intense') | null;
              };
              id?: string | null;
            }[];
            /**
             * Depending on the amount of information in the slides (title, CTA), different intervals might be more suitable. The default value is 7 seconds.
             */
            autoplayIntervalInSeconds?: number | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroSlides';
          }
        | {
            /**
             * The video should be optimized for web pages before uploading it.
             */
            video: string | Media;
            /**
             * The preview image is shown while the video is still loading. It should be the first frame of the video to provide a seamless transition.
             */
            previewImage?: (string | null) | Media;
            overlayTitle?: {
              show?: boolean | null;
              text?: (string | null) | Text;
              supportingText?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              position?: ('center' | 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left') | null;
              /**
               * The overlay is a semi-transparent black layer that is placed on top of the image to make the text more readable. Choose the intensity that is the best trade-off between readability of the text and brightness of the image.
               */
              overlay?: ('subtle' | 'moderate' | 'intense') | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroVideo';
          }
        | {
            heading: string | Text;
            image?: (string | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroHeading';
          }
      )[]
    | null;
  /**
   * Add blocks to create the layout of the page. You can reorder the blocks by dragging and dropping them using the handle on the left side.
   */
  layout?:
    | (
        | {
            heading?: (string | null) | Text;
            text: string | Text;
            cta?: {
              show?: boolean | null;
              label?: (string | null) | Text;
              link?: (string | null) | Link;
              variant?: ('primary' | 'secondary') | null;
            };
            /**
             * An element ID allows you to link to this element from other parts of the site. If the ID is 'about-us', you can link to it with an URL ending in '#about-us'.
             */
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'LeadText';
          }
        | {
            heading: string | Text;
            text: string | Text;
            /**
             * Each card represents an accommodation brand. You can change their order and update their image and description here.
             */
            cards: {
              brand: string | Brand;
              image: string | Media;
              description: string | Text;
              id?: string | null;
            }[];
            /**
             * An element ID allows you to link to this element from other parts of the site. If the ID is 'about-us', you can link to it with an URL ending in '#about-us'.
             */
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'AccommodationSelector';
          }
        | {
            image: string | Media;
            overlayTitle: {
              text: string | Text;
              position?: ('top-left' | 'top-right') | null;
              /**
               * The overlay is a semi-transparent black layer that is placed on top of the image to make the text more readable. Choose the intensity that is the best trade-off between readability of the text and brightness of the image.
               */
              overlay?: ('subtle' | 'moderate' | 'intense') | null;
            };
            text: string | Text;
            /**
             * An element ID allows you to link to this element from other parts of the site. If the ID is 'about-us', you can link to it with an URL ending in '#about-us'.
             */
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'ImageWithFloatingText';
          }
        | {
            heading?: (string | null) | Text;
            text: string | Text;
            image?: (string | null) | Media;
            imagePosition?: ('left' | 'right') | null;
            /**
             * Check this box to display the image in grayscale.
             */
            grayscaleImage?: boolean | null;
            /**
             * An element ID allows you to link to this element from other parts of the site. If the ID is 'about-us', you can link to it with an URL ending in '#about-us'.
             */
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Story';
          }
        | {
            orientation?: ('first-image-left' | 'first-image-right') | null;
            items: {
              image: string | Media;
              heading: string | Text;
              text: string | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            /**
             * An element ID allows you to link to this element from other parts of the site. If the ID is 'about-us', you can link to it with an URL ending in '#about-us'.
             */
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Features';
          }
        | {
            id?: string | null;
            blockName?: string | null;
            blockType: 'Separator';
          }
        | {
            image: string | Media;
            overlayTextBox?: {
              show?: boolean | null;
              heading?: (string | null) | Text;
              text?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              position?: ('top-left' | 'top-right' | 'bottom-left' | 'bottom-right') | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'WideImage';
          }
        | {
            rooms: {
              heading: string | Text;
              text?: (string | null) | Text;
              images: {
                image: string | Media;
                caption?: (string | null) | Text;
                id?: string | null;
              }[];
              cta: {
                label: string | Text;
                link: string | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'RoomList';
          }
        | {
            heading?: (string | null) | Text;
            text?: (string | null) | Text;
            /**
             * Note that the specified number of columns per row is for standard desktop screens (width of 1280px or more) and will be reduced automatically on smaller screens.
             */
            numberOfColumns?: number | null;
            items: {
              image?: (string | null) | Media;
              size?: ('full' | 'medium' | 'small') | null;
              heading?: (string | null) | Text;
              text?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            /**
             * An element ID allows you to link to this element from other parts of the site. If the ID is 'about-us', you can link to it with an URL ending in '#about-us'.
             */
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'TextColumnsWithImages';
          }
        | {
            /**
             * Enter the address to display on the map, including the business name. It should resolve unambiguously to a place on Google Maps.
             */
            address: string;
            /**
             * Enter a number from 0 to 22. The level of detail for the different zoom levels is approximately: 1—World, 5—Landmass/continent, 10—City, 15—Streets, 20—Buildings. Floating point numbers are allowed, e.g. 14.5.
             */
            zoomLevel: number;
            overlayTextBox: {
              heading: string | Text;
              text: string | Text;
              /**
               * Leave blank to hide the call to action.
               */
              callToActionLabel?: (string | null) | Text;
              position?: ('top-left' | 'top-right' | 'bottom-left' | 'bottom-right') | null;
            };
            /**
             * An element ID allows you to link to this element from other parts of the site. If the ID is 'about-us', you can link to it with an URL ending in '#about-us'.
             */
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Map';
          }
      )[]
    | null;
  seo?: {
    /**
     * The description is shown in search engine results. It should be between 100 and 150 characters.
     */
    description?: (string | null) | Text;
    /**
     * The image is shown in search engine results and when the page is shared on social media. It will be automatically sized to 1200x630 pixels.
     */
    image?: (string | null) | Media;
  };
  /**
   * Choose the brand to which the page belongs. The brand determines the theme of the page.
   */
  brand: string | Brand;
  /**
   * The pathname is used to navigate to this page. It must be unique and cannot be changed after the page has been created. The first path segment must be the brand's home link.
   */
  pathname: string;
  /**
   * The title is shown in the title bar of the browser and in search engine results. Include important keywords for SEO. The brand’s base title is appended to the title.
   */
  title?: (string | null) | Text;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "texts".
 */
export interface Text {
  id: string;
  text?: string | null;
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  richText_html?: string | null;
  /**
   * This cannot be changed after creation.
   */
  type: 'plainText' | 'richText';
  /**
   * Add a comment to help other editors understand the purpose of this text. Keep in mind that texts might need different translations depending on the context.
   */
  comment?: string | null;
  /**
   * This field is generated automatically and is only used internally in the CMS to identify the text.
   */
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  /**
   * Add a media category to easily find this media. When you select the media, you can filter by this category.
   */
  category?: (string | null) | MediaCategory;
  /**
   * Add an internal comment to note any important information about this media, e.g. the source.
   */
  comment?: string | null;
  /**
   * A brief description of the media for screen readers and search engines. It is not displayed on the page but is important for accessibility. For images an alt text can be generated automatically using OpenAI.
   */
  alt?: (string | null) | Text;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Use media categories to organize your media as you find it useful. When you select media, you can filter by category.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCategory".
 */
export interface MediaCategory {
  id: string;
  name: string;
  media?: {
    docs?: (string | Media)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * A banner is useful to announce promotions or important news and can have a call to action. Here you can create and manage banners. Go to Brands to enable a banner on all pages of the brand.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners".
 */
export interface Banner {
  id: string;
  /**
   * The name is only used within the CMS to easily identify the banner.
   */
  name: string;
  message: string | Text;
  cta?: {
    show?: boolean | null;
    label?: (string | null) | Text;
    link?: (string | null) | Link;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'brands';
        value: string | Brand;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'mediaCategory';
        value: string | MediaCategory;
      } | null)
    | ({
        relationTo: 'banners';
        value: string | Banner;
      } | null)
    | ({
        relationTo: 'texts';
        value: string | Text;
      } | null)
    | ({
        relationTo: 'links';
        value: string | Link;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands_select".
 */
export interface BrandsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  homeLink?: T;
  baseTitle?: T;
  logo?: T;
  banner?: T;
  navLinks?:
    | T
    | {
        label?: T;
        link?: T;
        id?: T;
      };
  bookCta?:
    | T
    | {
        show?: T;
        label?: T;
        link?: T;
      };
  footer?:
    | T
    | {
        linkGroups?:
          | T
          | {
              title?: T;
              links?:
                | T
                | {
                    label?: T;
                    link?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  hero?:
    | T
    | {
        HeroSlides?:
          | T
          | {
              seoPageHeading?: T;
              slides?:
                | T
                | {
                    image?: T;
                    imageAlignment?: T;
                    overlayTitle?:
                      | T
                      | {
                          show?: T;
                          text?: T;
                          supportingText?: T;
                          cta?:
                            | T
                            | {
                                show?: T;
                                label?: T;
                                link?: T;
                                variant?: T;
                              };
                          position?: T;
                          overlay?: T;
                        };
                    id?: T;
                  };
              autoplayIntervalInSeconds?: T;
              id?: T;
              blockName?: T;
            };
        HeroVideo?:
          | T
          | {
              video?: T;
              previewImage?: T;
              overlayTitle?:
                | T
                | {
                    show?: T;
                    text?: T;
                    supportingText?: T;
                    cta?:
                      | T
                      | {
                          show?: T;
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    position?: T;
                    overlay?: T;
                  };
              id?: T;
              blockName?: T;
            };
        HeroHeading?:
          | T
          | {
              heading?: T;
              image?: T;
              id?: T;
              blockName?: T;
            };
      };
  layout?:
    | T
    | {
        LeadText?:
          | T
          | {
              heading?: T;
              text?: T;
              cta?:
                | T
                | {
                    show?: T;
                    label?: T;
                    link?: T;
                    variant?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        AccommodationSelector?:
          | T
          | {
              heading?: T;
              text?: T;
              cards?:
                | T
                | {
                    brand?: T;
                    image?: T;
                    description?: T;
                    id?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        ImageWithFloatingText?:
          | T
          | {
              image?: T;
              overlayTitle?:
                | T
                | {
                    text?: T;
                    position?: T;
                    overlay?: T;
                  };
              text?: T;
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        Story?:
          | T
          | {
              heading?: T;
              text?: T;
              image?: T;
              imagePosition?: T;
              grayscaleImage?: T;
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        Features?:
          | T
          | {
              orientation?: T;
              items?:
                | T
                | {
                    image?: T;
                    heading?: T;
                    text?: T;
                    cta?:
                      | T
                      | {
                          show?: T;
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    id?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        Separator?:
          | T
          | {
              id?: T;
              blockName?: T;
            };
        WideImage?:
          | T
          | {
              image?: T;
              overlayTextBox?:
                | T
                | {
                    show?: T;
                    heading?: T;
                    text?: T;
                    cta?:
                      | T
                      | {
                          show?: T;
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    position?: T;
                  };
              id?: T;
              blockName?: T;
            };
        RoomList?:
          | T
          | {
              rooms?:
                | T
                | {
                    heading?: T;
                    text?: T;
                    images?:
                      | T
                      | {
                          image?: T;
                          caption?: T;
                          id?: T;
                        };
                    cta?:
                      | T
                      | {
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        TextColumnsWithImages?:
          | T
          | {
              heading?: T;
              text?: T;
              numberOfColumns?: T;
              items?:
                | T
                | {
                    image?: T;
                    size?: T;
                    heading?: T;
                    text?: T;
                    cta?:
                      | T
                      | {
                          show?: T;
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    id?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        Map?:
          | T
          | {
              address?: T;
              zoomLevel?: T;
              overlayTextBox?:
                | T
                | {
                    heading?: T;
                    text?: T;
                    callToActionLabel?: T;
                    position?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
      };
  seo?:
    | T
    | {
        description?: T;
        image?: T;
      };
  brand?: T;
  pathname?: T;
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  category?: T;
  comment?: T;
  alt?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCategory_select".
 */
export interface MediaCategorySelect<T extends boolean = true> {
  name?: T;
  media?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners_select".
 */
export interface BannersSelect<T extends boolean = true> {
  name?: T;
  message?: T;
  cta?:
    | T
    | {
        show?: T;
        label?: T;
        link?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "texts_select".
 */
export interface TextsSelect<T extends boolean = true> {
  text?: T;
  richText?: T;
  richText_html?: T;
  type?: T;
  comment?: T;
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links_select".
 */
export interface LinksSelect<T extends boolean = true> {
  page?: T;
  queryString?: T;
  fragment?: T;
  url?: T;
  type?: T;
  comment?: T;
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "common".
 */
export interface Common {
  id: string;
  footer: {
    address: string | Text;
    copyright: string | Text;
    socialLinks?:
      | {
          platform: 'facebook' | 'instagram' | 'whatsapp';
          link: string | Link;
          id?: string | null;
        }[]
      | null;
    newsletter?: {
      show?: boolean | null;
      title?: (string | null) | Text;
      description?: (string | null) | Text;
      emailPlaceholder?: (string | null) | Text;
      buttonLabel?: (string | null) | Text;
    };
  };
  maps: {
    /**
     * Enter the region code for maps, e.g. CO for Colombia. Must be two letters in uppercase. See https://developers.google.com/maps/documentation/javascript/localization#Region
     */
    region?: string | null;
    /**
     * Enter the ID of the map to display. This is the ID of the map in the Google Maps Platform and defines styling and POI settings.
     */
    mapId: string;
  };
  pageNotFoundScreen: {
    heading: string | Text;
    text: string | Text;
  };
  errorScreen: {
    heading: string | Text;
    text: string | Text;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "maintenance".
 */
export interface Maintenance {
  id: string;
  /**
   * Hide the complete website and show a maintenance screen instead.
   */
  maintenanceScreen?: {
    show?: boolean | null;
    message?: (string | null) | Text;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "common_select".
 */
export interface CommonSelect<T extends boolean = true> {
  footer?:
    | T
    | {
        address?: T;
        copyright?: T;
        socialLinks?:
          | T
          | {
              platform?: T;
              link?: T;
              id?: T;
            };
        newsletter?:
          | T
          | {
              show?: T;
              title?: T;
              description?: T;
              emailPlaceholder?: T;
              buttonLabel?: T;
            };
      };
  maps?:
    | T
    | {
        region?: T;
        mapId?: T;
      };
  pageNotFoundScreen?:
    | T
    | {
        heading?: T;
        text?: T;
      };
  errorScreen?:
    | T
    | {
        heading?: T;
        text?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "maintenance_select".
 */
export interface MaintenanceSelect<T extends boolean = true> {
  maintenanceScreen?:
    | T
    | {
        show?: T;
        message?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}

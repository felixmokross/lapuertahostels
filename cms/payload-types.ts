/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    brands: Brand;
    pages: Page;
    media: Media;
    mediaCategory: MediaCategory;
    banners: Banner;
    texts: Text;
    links: Link;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    brands: BrandsSelect<false> | BrandsSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    mediaCategory: MediaCategorySelect<false> | MediaCategorySelect<true>;
    banners: BannersSelect<false> | BannersSelect<true>;
    texts: TextsSelect<false> | TextsSelect<true>;
    links: LinksSelect<false> | LinksSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    common: Common;
    maintenance: Maintenance;
  };
  globalsSelect: {
    common: CommonSelect<false> | CommonSelect<true>;
    maintenance: MaintenanceSelect<false> | MaintenanceSelect<true>;
  };
  locale: 'en' | 'es' | 'de' | 'fr';
  user: User & {
    collection: 'users';
  };
  jobs?: {
    tasks: unknown;
    workflows?: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  role: 'cicd' | 'frontend' | 'editor' | 'admin';
  updatedAt: string;
  createdAt: string;
  enableAPIKey?: boolean | null;
  apiKey?: string | null;
  apiKeyIndex?: string | null;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands".
 */
export interface Brand {
  id: string;
  name: string;
  homeLink: string | Link;
  logo: string | Media;
  banner?: (string | null) | Banner;
  navLinks?:
    | {
        label: string | Text;
        link: string | Link;
        id?: string | null;
      }[]
    | null;
  footer?: {
    linkGroups?:
      | {
          name: string;
          title: string | Text;
          links?:
            | {
                label: string | Text;
                link: string | Link;
                id?: string | null;
              }[]
            | null;
          id?: string | null;
        }[]
      | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links".
 */
export interface Link {
  id: string;
  type: 'internal' | 'external';
  page?: (string | null) | Page;
  queryString?: string | null;
  fragment?: string | null;
  url?: string | null;
  comment?: string | null;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: string;
  url: string;
  brand?: (string | null) | Brand;
  title?: (string | null) | Text;
  hero?:
    | (
        | {
            slides: {
              name: string;
              image: string | Media;
              imageAlignment?: ('center' | 'bottom') | null;
              overlayTitle?: {
                show?: boolean | null;
                text?: (string | null) | Text;
                supportingText?: (string | null) | Text;
                cta?: {
                  show?: boolean | null;
                  label?: (string | null) | Text;
                  link?: (string | null) | Link;
                  variant?: ('primary' | 'secondary') | null;
                };
                position?: ('center' | 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left') | null;
                overlay?: ('subtle' | 'moderate' | 'intense') | null;
              };
              id?: string | null;
            }[];
            autoplayIntervalInSeconds?: number | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroSlides';
          }
        | {
            video: string | Media;
            previewImage?: (string | null) | Media;
            overlayTitle?: {
              show?: boolean | null;
              text?: (string | null) | Text;
              supportingText?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              position?: ('center' | 'top-left' | 'top-right' | 'bottom-right' | 'bottom-left') | null;
              overlay?: ('subtle' | 'moderate' | 'intense') | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroVideo';
          }
        | {
            heading: string | Text;
            image?: (string | null) | Media;
            id?: string | null;
            blockName?: string | null;
            blockType: 'HeroHeading';
          }
      )[]
    | null;
  layout?:
    | (
        | {
            heading?: (string | null) | Text;
            text: string | Text;
            cta?: {
              show?: boolean | null;
              label?: (string | null) | Text;
              link?: (string | null) | Link;
              variant?: ('primary' | 'secondary') | null;
            };
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'LeadText';
          }
        | {
            heading: string | Text;
            text: string | Text;
            cards: {
              brand: string | Brand;
              image: string | Media;
              description: string | Text;
              id?: string | null;
            }[];
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'AccommodationSelector';
          }
        | {
            image: string | Media;
            overlayTitle: {
              text: string | Text;
              supportingText?: (string | null) | Text;
              position?: ('top-left' | 'top-right') | null;
              overlay?: ('subtle' | 'moderate' | 'intense') | null;
            };
            text: string | Text;
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'ImageWithFloatingText';
          }
        | {
            heading?: (string | null) | Text;
            text: string | Text;
            image?: (string | null) | Media;
            imagePosition?: ('left' | 'right') | null;
            grayscaleImage?: boolean | null;
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Story';
          }
        | {
            orientation?: ('first-image-left' | 'first-image-right') | null;
            items: {
              image: string | Media;
              heading: string | Text;
              text: string | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Features';
          }
        | {
            id?: string | null;
            blockName?: string | null;
            blockType: 'Separator';
          }
        | {
            image: string | Media;
            overlayTextBox?: {
              show?: boolean | null;
              heading?: (string | null) | Text;
              text?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              position?: ('top-left' | 'top-right' | 'bottom-left' | 'bottom-right') | null;
            };
            id?: string | null;
            blockName?: string | null;
            blockType: 'WideImage';
          }
        | {
            rooms: {
              heading: string | Text;
              text?: (string | null) | Text;
              images: {
                image: string | Media;
                caption?: (string | null) | Text;
                id?: string | null;
              }[];
              cta: {
                label: string | Text;
                link: string | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            id?: string | null;
            blockName?: string | null;
            blockType: 'RoomList';
          }
        | {
            heading?: (string | null) | Text;
            text?: (string | null) | Text;
            numberOfColumns?: number | null;
            items: {
              image?: (string | null) | Media;
              size?: ('full' | 'medium' | 'small') | null;
              heading?: (string | null) | Text;
              text?: (string | null) | Text;
              cta?: {
                show?: boolean | null;
                label?: (string | null) | Text;
                link?: (string | null) | Link;
                variant?: ('primary' | 'secondary') | null;
              };
              id?: string | null;
            }[];
            elementId?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'TextColumnsWithImages';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "texts".
 */
export interface Text {
  id: string;
  type: 'plainText' | 'richText';
  text?: string | null;
  comment?: string | null;
  title?: string | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt?: string | null;
  category?: (string | null) | MediaCategory;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCategory".
 */
export interface MediaCategory {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners".
 */
export interface Banner {
  id: string;
  name: string;
  message: string | Text;
  cta?: {
    show?: boolean | null;
    label?: (string | null) | Text;
    link?: (string | null) | Link;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'brands';
        value: string | Brand;
      } | null)
    | ({
        relationTo: 'pages';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'media';
        value: string | Media;
      } | null)
    | ({
        relationTo: 'mediaCategory';
        value: string | MediaCategory;
      } | null)
    | ({
        relationTo: 'banners';
        value: string | Banner;
      } | null)
    | ({
        relationTo: 'texts';
        value: string | Text;
      } | null)
    | ({
        relationTo: 'links';
        value: string | Link;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  enableAPIKey?: T;
  apiKey?: T;
  apiKeyIndex?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "brands_select".
 */
export interface BrandsSelect<T extends boolean = true> {
  id?: T;
  name?: T;
  homeLink?: T;
  logo?: T;
  banner?: T;
  navLinks?:
    | T
    | {
        label?: T;
        link?: T;
        id?: T;
      };
  footer?:
    | T
    | {
        linkGroups?:
          | T
          | {
              name?: T;
              title?: T;
              links?:
                | T
                | {
                    label?: T;
                    link?: T;
                    id?: T;
                  };
              id?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  id?: T;
  url?: T;
  brand?: T;
  title?: T;
  hero?:
    | T
    | {
        HeroSlides?:
          | T
          | {
              slides?:
                | T
                | {
                    name?: T;
                    image?: T;
                    imageAlignment?: T;
                    overlayTitle?:
                      | T
                      | {
                          show?: T;
                          text?: T;
                          supportingText?: T;
                          cta?:
                            | T
                            | {
                                show?: T;
                                label?: T;
                                link?: T;
                                variant?: T;
                              };
                          position?: T;
                          overlay?: T;
                        };
                    id?: T;
                  };
              autoplayIntervalInSeconds?: T;
              id?: T;
              blockName?: T;
            };
        HeroVideo?:
          | T
          | {
              video?: T;
              previewImage?: T;
              overlayTitle?:
                | T
                | {
                    show?: T;
                    text?: T;
                    supportingText?: T;
                    cta?:
                      | T
                      | {
                          show?: T;
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    position?: T;
                    overlay?: T;
                  };
              id?: T;
              blockName?: T;
            };
        HeroHeading?:
          | T
          | {
              description?: T;
              heading?: T;
              image?: T;
              id?: T;
              blockName?: T;
            };
      };
  layout?:
    | T
    | {
        LeadText?:
          | T
          | {
              heading?: T;
              text?: T;
              cta?:
                | T
                | {
                    show?: T;
                    label?: T;
                    link?: T;
                    variant?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        AccommodationSelector?:
          | T
          | {
              heading?: T;
              text?: T;
              cards?:
                | T
                | {
                    brand?: T;
                    image?: T;
                    description?: T;
                    id?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        ImageWithFloatingText?:
          | T
          | {
              image?: T;
              overlayTitle?:
                | T
                | {
                    text?: T;
                    supportingText?: T;
                    position?: T;
                    overlay?: T;
                  };
              text?: T;
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        Story?:
          | T
          | {
              heading?: T;
              text?: T;
              image?: T;
              imagePosition?: T;
              grayscaleImage?: T;
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        Features?:
          | T
          | {
              orientation?: T;
              items?:
                | T
                | {
                    image?: T;
                    heading?: T;
                    text?: T;
                    cta?:
                      | T
                      | {
                          show?: T;
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    id?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
        Separator?:
          | T
          | {
              description?: T;
              id?: T;
              blockName?: T;
            };
        WideImage?:
          | T
          | {
              image?: T;
              overlayTextBox?:
                | T
                | {
                    show?: T;
                    heading?: T;
                    text?: T;
                    cta?:
                      | T
                      | {
                          show?: T;
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    position?: T;
                  };
              id?: T;
              blockName?: T;
            };
        RoomList?:
          | T
          | {
              rooms?:
                | T
                | {
                    heading?: T;
                    text?: T;
                    images?:
                      | T
                      | {
                          image?: T;
                          caption?: T;
                          id?: T;
                        };
                    cta?:
                      | T
                      | {
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    id?: T;
                  };
              id?: T;
              blockName?: T;
            };
        TextColumnsWithImages?:
          | T
          | {
              heading?: T;
              text?: T;
              numberOfColumns?: T;
              items?:
                | T
                | {
                    image?: T;
                    size?: T;
                    heading?: T;
                    text?: T;
                    cta?:
                      | T
                      | {
                          show?: T;
                          label?: T;
                          link?: T;
                          variant?: T;
                        };
                    id?: T;
                  };
              elementId?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  category?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCategory_select".
 */
export interface MediaCategorySelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banners_select".
 */
export interface BannersSelect<T extends boolean = true> {
  name?: T;
  message?: T;
  cta?:
    | T
    | {
        show?: T;
        label?: T;
        link?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "texts_select".
 */
export interface TextsSelect<T extends boolean = true> {
  type?: T;
  text?: T;
  comment?: T;
  title?: T;
  translations?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "links_select".
 */
export interface LinksSelect<T extends boolean = true> {
  type?: T;
  page?: T;
  queryString?: T;
  fragment?: T;
  url?: T;
  comment?: T;
  title?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "common".
 */
export interface Common {
  id: string;
  meta?: {
    description?: (string | null) | Text;
  };
  footer: {
    address: string | Text;
    copyright: string | Text;
    socialLinks?:
      | {
          platform: 'facebook' | 'instagram' | 'whatsapp';
          link: string | Link;
          id?: string | null;
        }[]
      | null;
    newsletter?: {
      show?: boolean | null;
      title?: (string | null) | Text;
      description?: (string | null) | Text;
      emailPlaceholder?: (string | null) | Text;
      buttonLabel?: (string | null) | Text;
    };
  };
  pageNotFoundScreen: {
    heading: string | Text;
    text: string | Text;
  };
  errorScreen: {
    heading: string | Text;
    text: string | Text;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "maintenance".
 */
export interface Maintenance {
  id: string;
  maintenanceScreen?: {
    show?: boolean | null;
    message?: (string | null) | Text;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "common_select".
 */
export interface CommonSelect<T extends boolean = true> {
  meta?:
    | T
    | {
        description?: T;
      };
  footer?:
    | T
    | {
        address?: T;
        copyright?: T;
        socialLinks?:
          | T
          | {
              platform?: T;
              link?: T;
              id?: T;
            };
        newsletter?:
          | T
          | {
              show?: T;
              title?: T;
              description?: T;
              emailPlaceholder?: T;
              buttonLabel?: T;
            };
      };
  pageNotFoundScreen?:
    | T
    | {
        heading?: T;
        text?: T;
      };
  errorScreen?:
    | T
    | {
        heading?: T;
        text?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "maintenance_select".
 */
export interface MaintenanceSelect<T extends boolean = true> {
  maintenanceScreen?:
    | T
    | {
        show?: T;
        message?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}
